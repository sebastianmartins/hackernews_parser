[project]
name = "hackernews-parser"
version = "0.1.0"
description = "hackernews parser codebase"
readme = "README.md"
requires-python = ">=3.13"
dependencies = []

[dependency-groups]
dev = [
    "bandit>=1.8.5",
    "black>=25.1.0",
    "flake8>=7.2.0",
    "flake8-pyproject>=1.2.3",
    "isort>=6.0.1",
    "mypy>=1.16.1",
    "pre-commit>=4.2.0",
    "pydocstyle>=6.3.0",
    "pytest>=8.4.1",
    "pytest-cov>=6.2.1",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src/parser"]

[tool.black]
line-length = 88
target-version = ['py313']

[tool.isort]
profile = "black"
line_length = 88

[tool.flake8]
max-line-length = 88
extend-ignore = ["E203", "W503"]

[tool.bandit]
exclude_dirs = ["tests"]
skips = ["B101"]

[tool.mypy]
python_version = "3.13"
warn_return_any = true
warn_unused_configs = true
ignore_missing_imports = true

[tool.pydocstyle]
convention = "google"
add_ignore = ["D100", "D104", "D212", "D205"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
]

[tool.coverage.run]
source = ["src"]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
